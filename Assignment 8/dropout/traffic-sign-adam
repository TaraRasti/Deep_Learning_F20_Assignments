{"cells":[{"metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"cell_type":"code","source":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nimport cv2\nfrom PIL import Image\nimport os","execution_count":2,"outputs":[]},{"metadata":{"_cell_guid":"79c7e3d0-c299-4dcb-8224-4455121ee9b0","_uuid":"d629ff2d2480ee46fbb7e2d37f6b5fab8052498a","trusted":true},"cell_type":"code","source":"data=[]\nlabels=[]\n\nheight = 30\nwidth = 30\nchannels = 3\nclasses = 43\nn_inputs = height * width*channels\n\nfor i in range(classes) :\n    path = \"../input/train/{0}/\".format(i)\n    print(path)\n    Class=os.listdir(path)\n    for a in Class:\n        try:\n            image=cv2.imread(path+a)\n            image_from_array = Image.fromarray(image, 'RGB')\n            size_image = image_from_array.resize((height, width))\n            data.append(np.array(size_image))\n            labels.append(i)\n        except AttributeError:\n            print(\" \")\n            \nCells=np.array(data)\nlabels=np.array(labels)\n\n#Randomize the order of the input images\ns=np.arange(Cells.shape[0])\nnp.random.seed(43)\nnp.random.shuffle(s)\nCells=Cells[s]\nlabels=labels[s]","execution_count":3,"outputs":[{"output_type":"stream","text":"../input/train/0/\n../input/train/1/\n../input/train/2/\n../input/train/3/\n../input/train/4/\n../input/train/5/\n../input/train/6/\n../input/train/7/\n../input/train/8/\n../input/train/9/\n../input/train/10/\n../input/train/11/\n../input/train/12/\n../input/train/13/\n../input/train/14/\n../input/train/15/\n../input/train/16/\n../input/train/17/\n../input/train/18/\n../input/train/19/\n../input/train/20/\n../input/train/21/\n../input/train/22/\n../input/train/23/\n../input/train/24/\n../input/train/25/\n../input/train/26/\n../input/train/27/\n../input/train/28/\n../input/train/29/\n../input/train/30/\n../input/train/31/\n../input/train/32/\n../input/train/33/\n../input/train/34/\n../input/train/35/\n../input/train/36/\n../input/train/37/\n../input/train/38/\n../input/train/39/\n../input/train/40/\n../input/train/41/\n../input/train/42/\n","name":"stdout"}]},{"metadata":{"trusted":true},"cell_type":"code","source":"(X_train,X_val)=Cells[(int)(0.2*len(labels)):],Cells[:(int)(0.2*len(labels))]\nX_train = X_train.astype('float32')/255 \nX_val = X_val.astype('float32')/255\n(y_train,y_val)=labels[(int)(0.2*len(labels)):],labels[:(int)(0.2*len(labels))]\n\nfrom keras.utils import to_categorical\ny_train = to_categorical(y_train, 43)\ny_val = to_categorical(y_val, 43)","execution_count":4,"outputs":[{"output_type":"stream","text":"Using TensorFlow backend.\n","name":"stderr"}]},{"metadata":{"trusted":true},"cell_type":"code","source":"from keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPool2D, Dense, Flatten, Dropout\n\nmodel = Sequential()\nmodel.add(Conv2D(filters=32, kernel_size=(5,5), activation='relu', input_shape=X_train.shape[1:]))\nmodel.add(Conv2D(filters=64, kernel_size=(3, 3), activation='relu'))\nmodel.add(MaxPool2D(pool_size=(2, 2)))\nmodel.add(Dropout(rate=0.25))\nmodel.add(Conv2D(filters=64, kernel_size=(3, 3), activation='relu'))\nmodel.add(MaxPool2D(pool_size=(2, 2)))\nmodel.add(Dropout(rate=0.25))\nmodel.add(Flatten())\nmodel.add(Dense(256, activation='relu'))\nmodel.add(Dropout(rate=0.5))\nmodel.add(Dense(43, activation='softmax'))\n\n\nmodel.compile(\n    loss='categorical_crossentropy', \n    optimizer='adam', \n    metrics=['accuracy']\n)","execution_count":5,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"epochs = 20\nhistory = model.fit(X_train, y_train, batch_size=32, epochs=epochs,\nvalidation_data=(X_val, y_val))\n\nimport matplotlib.pyplot as plt\n\nplt.figure(0)\nplt.plot(history.history['acc'], label='training accuracy')\nplt.plot(history.history['val_acc'], label='val accuracy')\nplt.title('Accuracy')\nplt.xlabel('epochs')\nplt.ylabel('accuracy')\nplt.legend()\n\nplt.figure(1)\nplt.plot(history.history['loss'], label='training loss')\nplt.plot(history.history['val_loss'], label='val loss')\nplt.title('Loss')\nplt.xlabel('epochs')\nplt.ylabel('loss')\nplt.legend()","execution_count":null,"outputs":[{"output_type":"stream","text":"Train on 31368 samples, validate on 7841 samples\nEpoch 1/20\n31328/31368 [============================>.] - ETA: 0s - loss: 1.2928 - acc: 0.6319","name":"stdout"}]}],"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.6.6","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat":4,"nbformat_minor":4}